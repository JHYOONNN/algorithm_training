#include<iostream>

using namespace std;

int tec[19][4][2] = {
	{{0,0},{0,1},{0,2},{0,3}},
	{ { 0,0 },{ 1,0 },{ 2,0 },{ 3,0 } },
	{ { 0,0 },{ 0,1 },{ 1,0 },{ 1,1 } },
	{ { 0,0 },{ 1,0 },{ 2,0 },{ 2,1 } },
	{ { 0,0 },{ 0,1 },{ 0,2 },{ 1,0 } },
	{ { 0,0 },{ 0,1 },{ 1,1 },{ 2,1 } },
	{ { 0,0 },{ 0,1 },{ 0,2 },{ -1,2 } },
	{ { 0,0 },{ 0,1 },{ -1,1 },{ -1,2 } },
	{ { 0,0 },{ 1,0 },{ 1,1 },{ 2,1 } },
	{ { 0,0 },{ 1,0 },{ 1,-1 },{ 2,-1 } },
	{ { 0,0 },{ 0,1 },{ 1,1 },{ 1,2 } },
	{ { 0,0 },{ 0,1 },{ -1,1 },{ -2,1 } },
	{ { 0,0 },{ 1,0 },{ 1,1 },{ 1,2 } },
	{ { 0,0 },{ 0,1 },{ 1,0 },{ 2,0 } },
	{ { 0,0 },{ 0,1 },{ 0,2 },{ 1,2 } },
	{ { 0,0 },{ 0,1 },{ -1,1 },{ 1,1 } },
	{ { 0,0 },{ 0,1 },{ 0,2 },{ -1,1 } },
	{ { 0,0 },{ 1,0 },{ 2,0 },{ 1,1 } },
	{ { 0,0 },{ 0,1 },{ 0,2 },{ 1,1 } }
};

int N, M;
int map[500][500];
int best_point = 0;

int main() {
	scanf("%d %d", &N, &M);
	for (int i = 0; i < N; i++)
		for (int j = 0; j < M; j++)
			scanf("%d", &map[i][j]);

	for (int i = 0; i < N; i++)
		for (int j = 0; j < M; j++) {
			for (int k = 0; k < 19; k++) {
				bool can_cal = true;
				for (int l = 0; l < 4; l++) {
					if (i + tec[k][l][0] < 0 || i + tec[k][l][0] >= N || j + tec[k][l][1] < 0 || j + tec[k][l][1] >= M) {
						can_cal = false;
						break;
					}
				}

				if (can_cal == true) {
					int point = 0;
					for (int l = 0; l < 4; l++) {
						point += map[i + tec[k][l][0]][j + tec[k][l][1]];
					}
					if (point > best_point) best_point = point;
				}
			}
		}

	printf("%d\n", best_point);
}